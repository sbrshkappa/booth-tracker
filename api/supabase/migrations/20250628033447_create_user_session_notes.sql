-- Create user_session_notes table for storing user notes and ratings for sessions
CREATE TABLE IF NOT EXISTS "public"."user_session_notes" (
    "id" bigint NOT NULL,
    "user_id" bigint NOT NULL,
    "session_id" bigint NOT NULL,
    "notes" text,
    "rating" integer DEFAULT 0 CHECK (rating >= 0 AND rating <= 5),
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT now() NOT NULL
);

-- Add comments
COMMENT ON TABLE "public"."user_session_notes" IS 'User notes and ratings for conference sessions';
COMMENT ON COLUMN "public"."user_session_notes"."user_id" IS 'Reference to the user who created the note';
COMMENT ON COLUMN "public"."user_session_notes"."session_id" IS 'Reference to the session being rated/noted';
COMMENT ON COLUMN "public"."user_session_notes"."notes" IS 'User notes about the session (optional)';
COMMENT ON COLUMN "public"."user_session_notes"."rating" IS 'User rating from 0-5 (0 = no rating)';

-- Set up identity column
ALTER TABLE "public"."user_session_notes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_session_notes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Add primary key
ALTER TABLE ONLY "public"."user_session_notes"
    ADD CONSTRAINT "user_session_notes_pkey" PRIMARY KEY ("id");

-- Add foreign key constraints
ALTER TABLE ONLY "public"."user_session_notes"
    ADD CONSTRAINT "user_session_notes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_session_notes"
    ADD CONSTRAINT "user_session_notes_session_id_fkey" FOREIGN KEY ("session_id") REFERENCES "public"."sessions"("id") ON DELETE CASCADE;

-- Add unique constraint to ensure one note per user per session
ALTER TABLE ONLY "public"."user_session_notes"
    ADD CONSTRAINT "user_session_notes_user_session_unique" UNIQUE ("user_id", "session_id");

-- Add indexes for better performance
CREATE INDEX "user_session_notes_user_id_idx" ON "public"."user_session_notes" ("user_id");
CREATE INDEX "user_session_notes_session_id_idx" ON "public"."user_session_notes" ("session_id");
CREATE INDEX "user_session_notes_rating_idx" ON "public"."user_session_notes" ("rating");

-- Enable RLS
ALTER TABLE "public"."user_session_notes" ENABLE ROW LEVEL SECURITY;

-- Grant permissions
GRANT ALL ON TABLE "public"."user_session_notes" TO "postgres";
GRANT ALL ON TABLE "public"."user_session_notes" TO "anon";
GRANT ALL ON TABLE "public"."user_session_notes" TO "authenticated";
GRANT ALL ON TABLE "public"."user_session_notes" TO "service_role";

-- Grant permissions on sequence
GRANT USAGE, SELECT ON SEQUENCE "public"."user_session_notes_id_seq" TO "postgres";
GRANT USAGE, SELECT ON SEQUENCE "public"."user_session_notes_id_seq" TO "anon";
GRANT USAGE, SELECT ON SEQUENCE "public"."user_session_notes_id_seq" TO "authenticated";
GRANT USAGE, SELECT ON SEQUENCE "public"."user_session_notes_id_seq" TO "service_role";

-- Add RLS policies
CREATE POLICY "Users can view their own session notes" ON "public"."user_session_notes"
    FOR SELECT USING (auth.uid()::text = (
        SELECT email FROM public.users WHERE id = user_id
    ));

CREATE POLICY "Users can insert their own session notes" ON "public"."user_session_notes"
    FOR INSERT WITH CHECK (auth.uid()::text = (
        SELECT email FROM public.users WHERE id = user_id
    ));

CREATE POLICY "Users can update their own session notes" ON "public"."user_session_notes"
    FOR UPDATE USING (auth.uid()::text = (
        SELECT email FROM public.users WHERE id = user_id
    ));

CREATE POLICY "Users can delete their own session notes" ON "public"."user_session_notes"
    FOR DELETE USING (auth.uid()::text = (
        SELECT email FROM public.users WHERE id = user_id
    ));

-- Add function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_user_session_notes_updated_at 
    BEFORE UPDATE ON "public"."user_session_notes" 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column(); 