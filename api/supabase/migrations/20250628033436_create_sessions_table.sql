-- Create sessions table for conference schedule
CREATE TABLE IF NOT EXISTS "public"."sessions" (
    "id" bigint NOT NULL,
    "day" integer NOT NULL CHECK (day >= 1 AND day <= 7),
    "start_time" time without time zone NOT NULL,
    "topic" text NOT NULL,
    "speaker" text,
    "description" text,
    "type" text NOT NULL CHECK (type IN (
        'break', 'lunch', 'talk', 'video', 'performance', 'exhibition', 
        'panel', 'q&a', 'workshop', 'keynote', 'networking', 'registration',
        'opening_ceremony', 'closing_ceremony', 'award_ceremony', 'demo',
        'poster_session', 'roundtable', 'fireside_chat', 'interview'
    )),
    "location" text,
    "room" text,
    "capacity" integer,
    "is_children_friendly" boolean DEFAULT false,
    "requires_registration" boolean DEFAULT false,
    "tags" text[],
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT now() NOT NULL
);

-- Add comments
COMMENT ON TABLE "public"."sessions" IS 'Conference sessions and events schedule';
COMMENT ON COLUMN "public"."sessions"."day" IS 'Day of the conference (1, 2, 3, etc.)';
COMMENT ON COLUMN "public"."sessions"."type" IS 'Type of session (break, lunch, talk, etc.)';
COMMENT ON COLUMN "public"."sessions"."location" IS 'General location/venue';
COMMENT ON COLUMN "public"."sessions"."room" IS 'Specific room or area';
COMMENT ON COLUMN "public"."sessions"."capacity" IS 'Maximum number of attendees';
COMMENT ON COLUMN "public"."sessions"."is_children_friendly" IS 'Whether this session is suitable for children';
COMMENT ON COLUMN "public"."sessions"."requires_registration" IS 'Whether attendees need to register for this session';
COMMENT ON COLUMN "public"."sessions"."tags" IS 'Array of tags for filtering and categorization';

-- Set up identity column
ALTER TABLE "public"."sessions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."sessions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Add primary key
ALTER TABLE ONLY "public"."sessions"
    ADD CONSTRAINT "sessions_pkey" PRIMARY KEY ("id");

-- Add unique constraint to prevent overlapping sessions in the same room
ALTER TABLE ONLY "public"."sessions"
    ADD CONSTRAINT "sessions_room_time_unique" UNIQUE ("day", "room", "start_time");

-- Add indexes for better performance
CREATE INDEX "sessions_day_idx" ON "public"."sessions" ("day");
CREATE INDEX "sessions_type_idx" ON "public"."sessions" ("type");
CREATE INDEX "sessions_time_idx" ON "public"."sessions" ("day", "start_time");
CREATE INDEX "sessions_children_friendly_idx" ON "public"."sessions" ("is_children_friendly");

-- Enable RLS
ALTER TABLE "public"."sessions" ENABLE ROW LEVEL SECURITY;

-- Grant permissions
GRANT ALL ON TABLE "public"."sessions" TO "postgres";
GRANT ALL ON TABLE "public"."sessions" TO "anon";
GRANT ALL ON TABLE "public"."sessions" TO "authenticated";
GRANT ALL ON TABLE "public"."sessions" TO "service_role";

-- Grant permissions on sequence
GRANT USAGE, SELECT ON SEQUENCE "public"."sessions_id_seq" TO "postgres";
GRANT USAGE, SELECT ON SEQUENCE "public"."sessions_id_seq" TO "anon";
GRANT USAGE, SELECT ON SEQUENCE "public"."sessions_id_seq" TO "authenticated";
GRANT USAGE, SELECT ON SEQUENCE "public"."sessions_id_seq" TO "service_role";

-- Add RLS policies
CREATE POLICY "Enable read access for all users" ON "public"."sessions"
    FOR SELECT USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."sessions"
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Enable update for authenticated users only" ON "public"."sessions"
    FOR UPDATE USING (auth.role() = 'authenticated');

CREATE POLICY "Enable delete for authenticated users only" ON "public"."sessions"
    FOR DELETE USING (auth.role() = 'authenticated'); 